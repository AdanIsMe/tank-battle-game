Tank Battle Visualizer – What We Did

We built a Python-based visualizer to replay the simulation results of our C++ Tank Battle game. The idea was to take the raw game logs and turn them into something visual and interactive so we can better understand how the tanks behave each step—especially useful for debugging AI and logic.

What we added:
- A **visualizer** using the pygame library. It reads each step of the simulation from a text log file (`game_flow.txt`) and animates it: tank moves, firing shells, mine placements, wall collisions, and so on.
- **Input logging** (bonus). This isn't mandatory, but it helps a lot. For each step, we log what actions each player took. This gives us clarity when comparing the visual outcome to what was actually supposed to happen.

What the visualizer shows:
- Tank positions and the direction they’re facing
- Moving projectiles and where they hit
- Walls, mines.
- Everything progresses one step at a time, with a short delay between steps so you can follow along

How it works:
The main script is `tank_game_visualizer.py`. It expects a text file called `game_flow.txt` to be present in the same directory. That file is generated by the C++ simulation and should follow a specific format:
1. First line: board size → `Board size: WxH`
2. For each step:
   - A line showing the step number: `Step 0:`
   - Two lines showing each player’s action (like `Player 1: SHOOT`)
   - H lines of the board state, each with W characters
   - A separator line: `---`

What you need to run it:
- Python 3.6 or higher
- `pygame` installed (use `pip install pygame`)
- The script `tank_game_visualizer.py`
- A valid `game_flow.txt` generated by running the program 

Optional but recommended:
- A virtual environment to manage dependencies (`python -m venv venv`)

To launch it:
Once you have everything set up in the same folder, just run:

    python tank_game_visualizer.py game_flow.txt

That’ll pop open a pygame window and start the animation.

We made this mainly to make development easier and to visually track how the logic behaves step-by-step. Super helpful when you're tuning AI or fixing bugs in tank behavior.

